/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.davidbuzatto.jjudge.gui;

import br.com.davidbuzatto.jjudge.testsets.TestResult;
import br.com.davidbuzatto.jjudge.testsets.TestSetResult;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JFrame;

/**
 *
 * @author David
 */
public class ResultDialog extends javax.swing.JDialog {
    
    /**
     * Creates new form ResultDialog
     */
    public ResultDialog( JFrame parent, boolean modal, List<TestSetResult> tSetResList ) {
        super( parent, modal );
        initComponents();
        customInit( tSetResList );
    }
    
    private void customInit( List<TestSetResult> tSetResList ) {
        
        setIconImage( new ImageIcon( getClass().getResource(
                "/br/com/davidbuzatto/jjudge/gui/icons/report.png" ) ).getImage() );
        
        textAreaResult.setText( processResults( tSetResList ) );
        
    }
    
    private String processResults( List<TestSetResult> tSetResList ) {
        
        StringBuilder sb = new StringBuilder();
        
        sb.append( "student" )
                .append( "\t" )
                .append( "code" )
                .append( "\t" );
        
        for ( TestResult tr : tSetResList.get( 0 ).getTestResults() ) {
            sb.append( tr.getTest().getName() ).append( "\t" );
        }
        
        sb.append( "grade" );
        sb.append( "\n" );
        
        for ( TestSetResult tsr : tSetResList ) {
            
            sb.append( tsr.getStudent().getName() )
                    .append( "\t" )
                    .append( tsr.getStudent().getCode() )
                    .append( "\t" );
            
            for ( TestResult tr : tsr.getTestResults() ) {
                
                String result = "-";
                
                switch ( tr.getExecutionState() ) {
                    case APPROVED:
                        result = "A";
                        break;
                    case REPROVED:
                        result = "R";
                        break;
                    case COMPILATION_ERROR:
                        result = "CE";
                        break;
                    case RUNTIME_ERROR:
                        result = "RE";
                        break;
                    case TIMEOUT_ERROR:
                        result = "TE";
                        break;
                    case FILE_NOT_FOUND_ERROR:
                        result = "FE";
                        break;
                }
                
                sb.append( result ).append( "\t" );
                
            }
            
            sb.append( String.format( "%.2f", tsr.getGrade() ) );
            sb.append( "\n" );
            
        }
        
        sb.append( "\n" );
            
        sb.append( "A: approved\n" );
        sb.append( "R: reproved\n" );
        sb.append( "CE: compilation error\n" );
        sb.append( "RE: runtime error\n" );
        sb.append( "TE: timeout error\n" );
        sb.append( "FE: file not found error" );
            
        return sb.toString();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings( "unchecked" )
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPaneResult = new javax.swing.JScrollPane();
        textAreaResult = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Test Results");

        textAreaResult.setColumns(20);
        textAreaResult.setFont(new java.awt.Font("Monospaced", 1, 13)); // NOI18N
        textAreaResult.setRows(5);
        scrollPaneResult.setViewportView(textAreaResult);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPaneResult, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPaneResult, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane scrollPaneResult;
    private javax.swing.JTextArea textAreaResult;
    // End of variables declaration//GEN-END:variables
}
